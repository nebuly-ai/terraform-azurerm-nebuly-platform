strimzi:
  enabled: true

imagePullSecrets:
  - name: nebuly-docker-pull

backend:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-backend"
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: /backend(/|$)(.*)
            pathType: Prefix

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: ${secret_provider_class_name}

eventIngestion:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-event-ingestion"

  rootPath: "/event-ingestion"

  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: /event-ingestion(/|$)(.*)
            pathType: Prefix

azureml:
  enabled: false

aiModels:
  registry: aws_s3
  aws:
    bucketName: "" # TODO

lionLinguist:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-lion-linguist"

  # TODO: will be updated when we implement CPU + Batch Job mode
  modelsCache:
    enabled: true
    storageClassName: managed-csi-zrs
    accessModes:
      - ReadWriteOnce

  resources:
    requests:
      cpu: "1"
    limits:
      memory: 8Gi
      nvidia.com/gpu: 1

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: nebuly.com/accelerator
                operator: In
                values:
                  - nvidia-tesla-t4

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: ${secret_provider_class_name}

ingestionWorker:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-ingestion-worker"

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: ${secret_provider_class_name}

kafka:
  external: false
  zookeeper:
    replicas: 1
    storage:
      class: gp2-csi
  replicas: 1
  config:
    offsets.topic.replication.factor: 1
    replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector
  storage:
    class: managed-csi-zrs
    size: 32Gi
  resources:
    limits:
      memory: 6Gi
    requests:
      memory: 6Gi

analyticDatabase:
  server: "${postgres_server_url}"
  name: ${postgres_analytics_database_name}
  existingSecret:
    name: ${secret_provider_class_secret_name}
    userKey: ${secret_key_db_username}
    passwordKey: ${secret_key_db_password}

auth:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-tenant-registry"

  postgresServer: "${postgres_server_url}"
  postgresDatabase: ${postgres_auth_database_name}
  existingSecret:
    name: ${secret_provider_class_secret_name}
    postgresUserKey: ${secret_key_db_username}
    postgresPasswordKey: ${secret_key_db_password}
    jwtSigningKey: ${secret_key_jwt_signing_key}

  loginModes: "password"
  microsoft:
    enabled: false
    redirectUri: https://${platform_domain}/backend/auth/oauth/microsoft/callback
    tenantId: ""
    existingSecret:
      name: ${secret_provider_class_secret_name}
      clientIdKey: microsoft-oauth-client-id
      clientSecretKey: microsoft-oauth-client-secret

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: ${secret_provider_class_name}
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/auth/$2"
      nginx.ingress.kubernetes.io/use-regex: "true"
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: "/backend/auth(/|$)(.*)"
            pathType: Prefix

frontend:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-frontend"

  rootUrl: https://${platform_domain}
  backendApiUrl: https://${platform_domain}/backend
  authApiUrl: https://${platform_domain}/backend/auth
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: /
            pathType: Prefix

openAi:
  enabled: true
  frustrationDetectionDeployment: "" # TODO
  endpoint: "" # TODO

  existingSecret:
    name: ${secret_provider_class_secret_name}
    apiKey: openai-api-key
