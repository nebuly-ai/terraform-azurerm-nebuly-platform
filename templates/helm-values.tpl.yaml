strimzi:
  enabled: true

imagePullSecrets:
  - name: nebuly-docker-pull

backend:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-backend"
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: /backend(/|$)(.*)
            pathType: Prefix

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: nebuly-platform

eventIngestion:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-event-ingestion"

  rootPath: "/event-ingestion"

  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/$2"
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: /event-ingestion(/|$)(.*)
            pathType: Prefix

azureml:
  enabled: false

aiModels:
  registry: aws_s3
  aws:
    bucketName: "" # TODO

lionLinguist:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-lion-linguist"

  modelsCache:
    enabled: true
    storageClassName: gp2-csi
    accessModes:
      - ReadWriteOnce

  resources:
    requests:
      cpu: "1"
    limits:
      memory: 8Gi
      nvidia.com/gpu: 1

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: nebuly.com/accelerator
                operator: In
                values:
                  - nvidia-tesla-t4

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: nebuly-platform

ingestionWorker:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-ingestion-worker"

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: nebuly-platform

kafka:
  external: false
  zookeeper:
    replicas: 1
    storage:
      class: gp2-csi
  replicas: 1
  config:
    offsets.topic.replication.factor: 1
    replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector
  storage:
    class: gp2-csi
    size: 32Gi
  resources:
    limits:
      memory: 6Gi
    requests:
      memory: 6Gi

analyticDatabase:
  server: "nbllabplatformanalytics.c72cu4g06kwz.us-east-1.rds.amazonaws.com"
  name: "analytics"
  existingSecret:
    name: nebuly-platform-credentials
    userKey: analytics-db-username
    passwordKey: analytics-db-password

auth:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-tenant-registry"

  postgresServer: "nbllabplatformauth.c72cu4g06kwz.us-east-1.rds.amazonaws.com"
  postgresDatabase: "auth"
  existingSecret:
    name: nebuly-platform-credentials
    postgresUserKey: auth-db-username
    postgresPasswordKey: auth-db-password
    jwtSigningKey: jwt-key

  loginModes: "password"
  microsoft:
    enabled: false
    redirectUri: https://${platform_domain}/backend/auth/oauth/microsoft/callback
    tenantId: ""
    existingSecret:
      name: microsoft-oauth-credentials
      clientIdKey: microsoft-oauth-client-id
      clientSecretKey: microsoft-oauth-client-secret

  volumeMounts:
    - name: secrets-store
      mountPath: /mnt/secrets-store
      readOnly: true
  volumes:
    - name: secrets-store
      csi:
        driver: secrets-store.csi.k8s.io
        readOnly: true
        volumeAttributes:
          secretProviderClass: nebuly-platform
  ingress:
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: "/auth/$2"
      nginx.ingress.kubernetes.io/use-regex: "true"
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: "/backend/auth(/|$)(.*)"
            pathType: Prefix

frontend:
  image:
    repository: "ghcr.io/nebuly-ai/nebuly-frontend"

  rootUrl: https://${platform_domain}
  backendApiUrl: https://${platform_domain}/backend
  authApiUrl: https://${platform_domain}/backend/auth
  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: ${platform_domain}
        paths:
          - path: /
            pathType: Prefix

openAi:
  enabled: true
  insightsGeneratorDeployment: gpt-4-1106-preview-nebuly
  textEmbeddingsDeployment: ada
  frustrationDetectionDeployment: gpt-4-1106-preview-nebuly
  chatCompletionDeployment: gpt-4-1106-preview-nebuly
  endpoint: https://openaixpanseaisandbox-useast2.openai.azure.com/

  existingSecret:
    name: nebuly-platform-credentials
    apiKey: openai-api-key

bootstrap-aws:
  enabled: true
  ingress-nginx:
    controller:
      allowSnippetAnnotations: true
      config:
        http-snippet: |
          server {
            if ($http_x_forwarded_proto = 'http') {
              return 301 https://$host$request_uri;
            }
          }
      service:
        targetPorts:
          http: http
          https: http
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-security-groups: "sg-0a2684cf0282660e5"
          service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
          service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:533267425677:certificate/6775c5fc-4e7a-4d61-9a1f-35c8455655fa"
          service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
  cluster-autoscaler:
    rbac:
      serviceAccount:
        annotations:
          eks.amazonaws.com/role-arn: "arn:aws:iam::533267425677:role/nbllabeks"
